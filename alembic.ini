# A generic, single database configuration.
# Alembic migration file for renaming 'user' table to 'users' and other changes.
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'de8874e63059'
down_revision = 'previous_revision_id'  # ใช้ revision ID ก่อนหน้านี้
branch_labels = None
depends_on = None

def upgrade():
    # Rename 'user' table to 'users'
    op.rename_table('user', 'users')

    # Update ForeignKey reference from 'user' to 'users'
    op.drop_constraint('fk_user_id', 'tasks', type_='foreignkey')
    op.create_foreign_key('fk_user_id', 'tasks', 'users', ['user_id'], ['id'])

    # Rename 'user' to 'users' in any other places (เช่น references หรือ constraints ใน table อื่นๆ)
    op.drop_constraint('fk_assignee_user_id', 'task_assignees', type_='foreignkey')
    op.create_foreign_key('fk_assignee_user_id', 'task_assignees', 'users', ['user_id'], ['id'])

def downgrade():
    # Revert 'users' back to 'user'
    op.rename_table('users', 'user')

    # Revert ForeignKey reference from 'users' to 'user'
    op.drop_constraint('fk_user_id', 'tasks', type_='foreignkey')
    op.create_foreign_key('fk_user_id', 'tasks', 'user', ['user_id'], ['id'])

    # Revert ForeignKey reference in 'task_assignees'
    op.drop_constraint('fk_assignee_user_id', 'task_assignees', type_='foreignkey')
    op.create_foreign_key('fk_assignee_user_id', 'task_assignees', 'user', ['user_id'], ['id'])

[alembic]
# path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
# version_path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = postgresql://task_admin:hYqIK8bRgevqPyf7VRZ2KD77ddjRck9t@dpg-cvn7e42dbo4c73bftkr0-a.oregon-postgres.render.com/task_app_kpou


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
